/**
 * @jest-environment jsdom
 */
import React from 'react'
import '@testing-library/jest-dom'
import { render } from '@testing-library/react'
import * as Sentry from '@sentry/react'
import sentryTestkit from '../src'

const { testkit, sentryTransport } = sentryTestkit()

const ThrowError = () => {
  // eslint-disable-next-line
  throw Error('test error')
}

describe('Inside ErrorBoundary', () => {
  const consoleError = console.error
  beforeAll(() => {
    console.error = jest.fn()
    Sentry.init({
      dsn: 'https://acacaeaccacacacabcaacdacdacadaca@sentry.io/000001',
      transport: sentryTransport,
    })
  })
  afterAll(() => {
    console.error = consoleError
  })

  test('should render Fallback component and captureException when error is thrown', async () => {
    expect(testkit.reports()).toHaveLength(0)
    render(
      <Sentry.ErrorBoundary fallback={<div>some error</div>}>
        <ThrowError />
      </Sentry.ErrorBoundary>
    )
    /* NOTE: This throws 3 errors:
     * 1. The original error that is captured by the error boundary
     * 2. The original error captured by global event listener.
     * This only occurs in in dev mode, because error boundaries rethrow the errors that they catch and those errors bubble up to the global event listener where it is captured again.
     * 3. A synthetic react error boundary error that is generated by the sentry react sdk and attached to an error.
     * This synthetic error is not captured as a standalone sentry event, but instead is included as part of the sentry event sent for the original error sent by the error boundary.
     * See https://docs.sentry.io/platforms/javascript/guides/react/features/error-boundary/#linked-errors for more details.
     */
    expect(testkit.reports()).toHaveLength(3)
  })
})
