"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[834],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>y});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(r),y=o,h=d["".concat(l,".").concat(y)]||d[y]||u[y]||a;return r?n.createElement(h,i(i({ref:t},p),{},{components:r})):n.createElement(h,i({ref:t},p))}));function y(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4870:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const a={title:"Sentry/React Error Boundary",description:"Explains how to use sentry-testkit with the Sentry/React Error Boundary",sidebar_position:3},i="Usage with `<Sentry.ErrorBoundary>`",s={unversionedId:"error-boundary-usage",id:"error-boundary-usage",title:"Sentry/React Error Boundary",description:"Explains how to use sentry-testkit with the Sentry/React Error Boundary",source:"@site/docs/error-boundary-usage.md",sourceDirName:".",slug:"/error-boundary-usage",permalink:"/sentry-testkit/docs/error-boundary-usage",draft:!1,editUrl:"https://github.com/zivl/sentry-testkit/blob/master/website/docs/docs/error-boundary-usage.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Sentry/React Error Boundary",description:"Explains how to use sentry-testkit with the Sentry/React Error Boundary",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Type Definitions",permalink:"/sentry-testkit/docs/api/types"},next:{title:"Network Interception",permalink:"/sentry-testkit/docs/network-interception"}},l={},c=[{value:"3 Errors are sent to Sentry",id:"3-errors-are-sent-to-sentry",level:2},{value:"Test Code Example",id:"test-code-example",level:3},{value:"What Else Can Be Done About It?",id:"what-else-can-be-done-about-it",level:2}],p={toc:c};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"usage-with-sentryerrorboundary"},"Usage with ",(0,o.kt)("inlineCode",{parentName:"h1"},"<Sentry.ErrorBoundary>")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"@sentry/react")," library exposes a ",(0,o.kt)("inlineCode",{parentName:"p"},"<Sentry.ErrorBoundary>")," React component that can be used to catch errors in React components, similar to the ",(0,o.kt)("inlineCode",{parentName:"p"},"componentDidCatch")," lifecycle method."),(0,o.kt)("p",null,"However, the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Sentry.ErrorBoundary>")," component causes Sentry to send multiple events due to the way it works under the hood. This is because it catches errors in the ",(0,o.kt)("inlineCode",{parentName:"p"},"componentDidCatch")," lifecycle method, and then re-throws them, which causes Sentry to send another event. This is not a problem in production, but it can be a problem when testing."),(0,o.kt)("h2",{id:"3-errors-are-sent-to-sentry"},"3 Errors are sent to Sentry"),(0,o.kt)("p",null,"When using ",(0,o.kt)("inlineCode",{parentName:"p"},"sentry-testkit")," to test Sentry reports, the ",(0,o.kt)("inlineCode",{parentName:"p"},"testkit.reports()")," call will return the following 3 total errors, as explained in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/getsentry/sentry-javascript/issues/9514#issuecomment-1805723611"},"Sentry's issue #9514"),":"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The original error that is captured by the error boundary"),(0,o.kt)("li",{parentName:"ol"},"The original error captured by global event listener. This only occurs in in dev mode, because error boundaries rethrow the errors that they catch and those errors bubble up to the global event listener where it is captured again."),(0,o.kt)("li",{parentName:"ol"},"A synthetic react error boundary error that is generated by the sentry react sdk and attached to an error. This synthetic error is not captured as a standalone sentry event, but instead is included as part of the sentry event sent for the original error sent by the error boundary. See ",(0,o.kt)("a",{parentName:"li",href:"https://docs.sentry.io/platforms/javascript/guides/react/features/error-boundary/#linked-errors"},"Linked Errors")," for more details.")),(0,o.kt)("p",null,"Internally, ",(0,o.kt)("inlineCode",{parentName:"p"},"sentry-testkit")," uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"testkit.reports()")," call to find the report for the original error, so it will return the first error in the list above. This is the error that you should use to test your application."),(0,o.kt)("admonition",{title:"2 Sentry events are being sent",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Event A -> original error (1) + synthetic error boundary error (3)",(0,o.kt)("br",null),"\nEvent B -> original error from global handlers (2)")),(0,o.kt)("h3",{id:"test-code-example"},"Test Code Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react'\nimport '@testing-library/jest-dom'\nimport { render } from '@testing-library/react'\nimport * as Sentry from '@sentry/react'\nimport sentryTestkit from 'sentry-testkit'\n\nconst { testkit, sentryTransport } = sentryTestkit()\n\nconst ThrowError = () => {\n  // eslint-disable-next-line\n  throw Error('test error')\n}\n\ndescribe('Inside ErrorBoundary', () => {\n  const consoleError = console.error\n  beforeAll(() => {\n    console.error = jest.fn()\n    Sentry.init({\n      dsn: 'https://acacaeaccacacacabcaacdacdacadaca@sentry.io/000001',\n      transport: sentryTransport,\n    })\n  })\n  afterAll(() => {\n    console.error = consoleError\n  })\n\n  test('should render fallback component and captureException when error is thrown', async () => {\n    expect(testkit.reports()).toHaveLength(0)\n    render(\n      <Sentry.ErrorBoundary fallback={<div>some error</div>}>\n        <ThrowError />\n      </Sentry.ErrorBoundary>\n    )\n    expect(testkit.reports()).toHaveLength(3)\n  })\n})\n")),(0,o.kt)("h2",{id:"what-else-can-be-done-about-it"},"What Else Can Be Done About It?"),(0,o.kt)("p",null,"You can alway customize it through Sentry's Integrations mechanism."),(0,o.kt)("p",null,"For example, you can disable the ",(0,o.kt)("inlineCode",{parentName:"p"},"GlobalHandler")," Integration by doing the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import * as Sentry from '@sentry/react'\nimport { Integrations } from '@sentry/tracing'\n\nSentry.init({\n  // ...\n  integrations: function (integrations) {\n    return integrations.filter(function (integration) {\n      return integration.name !== \"GlobalHandlers\";\n    });\n  },\n});\n\n")),(0,o.kt)("p",null,"You can also take a look on the ",(0,o.kt)("inlineCode",{parentName:"p"},"CaptureConsole")," Integration, which is responsible for capturing console errors. You can disable it by doing the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import * as Sentry from '@sentry/react'\nimport { Integrations } from '@sentry/tracing'\n\nSentry.init({\n  // ...\n  integrations: function (integrations) {\n    return integrations.filter(function (integration) {\n      return integration.name !== \"CaptureConsole\";\n    });\n  },\n});\n")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Find more information about Sentry's Integrations ",(0,o.kt)("a",{parentName:"p",href:"https://docs.sentry.io/platforms/javascript/configuration/integrations"},"here"),".")))}u.isMDXComponent=!0}}]);