"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[731],{5564:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"span-ids","title":"Span IDs","description":"Overview","source":"@site/docs/span-ids.md","sourceDirName":".","slug":"/span-ids","permalink":"/sentry-testkit/docs/span-ids","draft":false,"unlisted":false,"editUrl":"https://github.com/zivl/sentry-testkit/blob/master/website/docs/docs/span-ids.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Raven Testkit (Legacy API)","permalink":"/sentry-testkit/docs/raven-testkit-legacy"}}');var r=t(4848),i=t(8453);const a={},o="Span IDs",c={},p=[{value:"Overview",id:"overview",level:2},{value:"What are Span IDs?",id:"what-are-span-ids",level:2},{value:"Accessing Span IDs in Tests",id:"accessing-span-ids-in-tests",level:2},{value:"Example Use Case: Testing Trace Relationships",id:"example-use-case-testing-trace-relationships",level:2},{value:"Integration with Transactions",id:"integration-with-transactions",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"span-ids",children:"Span IDs"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["Starting from version 6.1.0, sentry-testkit provides support for ",(0,r.jsx)(n.code,{children:"spanId"})," and ",(0,r.jsx)(n.code,{children:"parentSpanId"})," properties in your Sentry reports. These IDs are essential for performance monitoring and distributed tracing, allowing you to track the relationships between various spans and transactions in your application."]}),"\n",(0,r.jsx)(n.h2,{id:"what-are-span-ids",children:"What are Span IDs?"}),"\n",(0,r.jsx)(n.p,{children:"In the context of distributed tracing:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"spanId"}),": A unique identifier for a specific operation or unit of work within your application. Each span represents a single operation, such as a function call or a database query."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"parentSpanId"}),": A reference to the parent span that initiated the current operation. This creates a hierarchical relationship between spans, allowing you to understand the full context of operations."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"accessing-span-ids-in-tests",children:"Accessing Span IDs in Tests"}),"\n",(0,r.jsx)(n.p,{children:"You can access these properties in your test assertions:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const sentryTestkit = require('sentry-testkit')\nconst { testkit } = sentryTestkit()\n\n// After your code triggers a Sentry event\nconst reports = testkit.reports()\nconst lastReport = reports[reports.length - 1]\n\n// Access span IDs\nconsole.log(lastReport.spanId) // Unique identifier for this span\nconsole.log(lastReport.parentSpanId) // Reference to parent span (if exists)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"example-use-case-testing-trace-relationships",children:"Example Use Case: Testing Trace Relationships"}),"\n",(0,r.jsx)(n.p,{children:"You can use these IDs to verify that your application correctly creates parent-child relationships between operations:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"test('should create child spans with correct parent references', async () => {\n  // Trigger a parent operation that creates child spans\n  await performParentOperationWithChildren()\n\n  const reports = testkit.reports()\n\n  // Find the parent span\n  const parentReport = reports.find(r => r.transaction === 'parentOperation')\n\n  // Verify child spans reference the parent\n  const childReports = reports.filter(\n    r => r.parentSpanId === parentReport.spanId\n  )\n\n  expect(childReports.length).toBeGreaterThan(0)\n  expect(childReports[0].transaction).toBe('childOperation')\n})\n"})}),"\n",(0,r.jsx)(n.h2,{id:"integration-with-transactions",children:"Integration with Transactions"}),"\n",(0,r.jsx)(n.p,{children:"Span IDs work seamlessly with Sentry's transaction API. When working with performance monitoring:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const transaction = Sentry.startTransaction({ name: 'My Transaction' })\nSentry.configureScope(scope => scope.setSpan(transaction))\n\n// Later in your tests\nexpect(testkit.transactions()[0].spanId).toBeDefined()\n"})}),"\n",(0,r.jsx)(n.p,{children:"This feature enhancement makes it easier to test distributed tracing functionality in your applications while using sentry-testkit."})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);