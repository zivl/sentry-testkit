"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[927],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>y});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=c(r),y=a,m=u["".concat(p,".").concat(y)]||u[y]||d[y]||s;return r?n.createElement(m,o(o({ref:t},l),{},{components:r})):n.createElement(m,o({ref:t},l))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<s;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},4902:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const s={sidebar_position:1},o="Type Definitions",i={unversionedId:"api/types",id:"api/types",title:"Type Definitions",description:"ReportError",source:"@site/docs/api/types.md",sourceDirName:"api",slug:"/api/types",permalink:"/sentry-testkit/docs/api/types",draft:!1,editUrl:"https://github.com/zivl/sentry-testkit/blob/master/website/docs/docs/api/types.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"API Reference",permalink:"/sentry-testkit/docs/api/"},next:{title:"Sentry/React Error Boundary",permalink:"/sentry-testkit/docs/error-boundary-usage"}},p={},c=[{value:"<code>ReportError</code>",id:"reporterror",level:3},{value:"<code>Report</code>",id:"report",level:3},{value:"<code>Transaction</code>",id:"transaction",level:3},{value:"<code>Span</code>",id:"span",level:3}],l={toc:c};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"type-definitions"},"Type Definitions"),(0,a.kt)("h3",{id:"reporterror"},(0,a.kt)("inlineCode",{parentName:"h3"},"ReportError")),(0,a.kt)("p",null,"Represents a report error object. The object has the following keys:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"  interface ReportError {\n    // The error name\n    name: string\n    //The error message\n    message: string\n    // The error stacktrace as individual frames\n    stacktrace: Stacktrace\n  }\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"See:")," ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/getsentry/sentry-javascript/blob/master/packages/types/src/stacktrace.ts"},"Stacktrace")),(0,a.kt)("h3",{id:"report"},(0,a.kt)("inlineCode",{parentName:"h3"},"Report")),(0,a.kt)("p",null,"Represents a report event."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"  interface Report {\n    // An array of Breadcrumb objects\n    breadcrumbs: Breadcrumb[] = []\n    // An error object. The error will be defined when using `Sentry.captureException`\n    error?: ReportError\n    // The message key will be defined when using `Sentry.captureMessage`.\n    message?: string\n    // The extra context provided by `scope.setExtra`.\n    extra?: { [key: string]: any }\n    // The level of the report provided by `scope.setLevel`.\n    level: SeverityLevel = SeverityLevel.Error\n    // The release string provided by `scope.setRelease`.\n    release?: string\n    // The user provided by `scope.setUser`.\n    user?: User\n    // The tags provided by `scope.setTag`.\n    tags: { [key: string]: string } = {}\n    // Sentry's original report object.\n    originalReport: Event\n  }\n")),(0,a.kt)("p",null,"The tags provided by ",(0,a.kt)("inlineCode",{parentName:"p"},"scope.setTag"),".\n",(0,a.kt)("strong",{parentName:"p"},"See:"),"\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/getsentry/sentry-javascript/blob/master/packages/types/src/breadcrumb.ts"},(0,a.kt)("inlineCode",{parentName:"a"},"Breadcrumb")),"\n",(0,a.kt)("a",{parentName:"p",href:"#reporterror"},(0,a.kt)("inlineCode",{parentName:"a"},"ReportError")),"\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/getsentry/sentry-javascript/blob/master/packages/types/src/severity.ts"},"Severity"),"\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/getsentry/sentry-javascript/blob/master/packages/types/src/user.ts"},"User"),"\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/getsentry/sentry-javascript/blob/master/packages/types/src/event.ts"},"SentryEvent")),(0,a.kt)("h3",{id:"transaction"},(0,a.kt)("inlineCode",{parentName:"h3"},"Transaction")),(0,a.kt)("p",null,"Represents a transaction event."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"  interface Transaction {\n    // The `name` field of the transaction.\n    name: string\n    // The id of the trace the transaction is associated with.\n    traceId: string\n    // The release string provided by `scope.setRelease`.\n    release?: string\n    // The extra context provided by `scope.setExtra`.\n    extra?: Record<string, unknown>\n    // The tags provided by `scope.setTag`.\n    tags: Record<string, unknown> = {}\n    // An array of child `Span` objects for this transaction\n    spans: Span[] = []\n  }\n")),(0,a.kt)("h3",{id:"span"},(0,a.kt)("inlineCode",{parentName:"h3"},"Span")),(0,a.kt)("p",null,"Represents a child span event of a specific transaction."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"  interface Span {\n    // The `id` field of the reported span.\n    id: string\n    // The `op` field of the reported span.\n    op?: string = 'default'\n    // The `description` field of the reported span.\n    description?: string\n    // The id of the parent transaction.\n    parentSpanId: string\n  }\n")))}d.isMDXComponent=!0}}]);