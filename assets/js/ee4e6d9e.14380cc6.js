"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[984],{4223:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>l,frontMatter:()=>s,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"network-interception","title":"Network Interception","description":"How to intercept network requests related to Sentry with Sentry Testkit","source":"@site/docs/network-interception.md","sourceDirName":".","slug":"/network-interception","permalink":"/sentry-testkit/docs/network-interception","draft":false,"unlisted":false,"editUrl":"https://github.com/zivl/sentry-testkit/blob/master/website/docs/docs/network-interception.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Network Interception","description":"How to intercept network requests related to Sentry with Sentry Testkit","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Sentry/React Error Boundary","permalink":"/sentry-testkit/docs/error-boundary-usage"},"next":{"title":"External Process","permalink":"/sentry-testkit/docs/external-process"}}');var o=n(4848),i=n(8453);const s={title:"Network Interception",description:"How to intercept network requests related to Sentry with Sentry Testkit",sidebar_position:3},c="Network Interception",a={},d=[{value:"API",id:"api",level:2},{value:"<code>initNetworkInterceptor</code>",id:"initnetworkinterceptor",level:3},{value:"Example using nock",id:"example-using-nock",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"network-interception",children:"Network Interception"})}),"\n",(0,o.jsxs)(t.p,{children:["Sentry Testkit supports using network interception libraries, without the need to change your application's ",(0,o.jsx)(t.code,{children:"Sentry.init"})," function.\nThe testkit is agnostic to the interception library you use."]}),"\n",(0,o.jsx)(t.h2,{id:"api",children:"API"}),"\n",(0,o.jsx)(t.h3,{id:"initnetworkinterceptor",children:(0,o.jsx)(t.code,{children:"initNetworkInterceptor"})}),"\n",(0,o.jsxs)(t.p,{children:["Sentry Testkit exports a ",(0,o.jsx)(t.code,{children:"initNetworkInterceptor"})," callback function, where you can init your interceptor.\nThe interceptor should intercept requests from ",(0,o.jsx)(t.code,{children:"baseUrl"})," and pass the request body (as json) to the ",(0,o.jsx)(t.code,{children:"handleRequestBody"})," function.\nFor envelope requests (such as performance events), we use the emitted request event,\nsince in a reply function nock automatically tries to parse the body as json,\nand fails since Sentry are using a non-standard json with a json request header."]}),"\n",(0,o.jsx)(t.admonition,{type:"info",children:(0,o.jsxs)(t.p,{children:["See ",(0,o.jsx)(t.a,{href:"https://develop.sentry.dev/sdk/envelopes/",children:"https://develop.sentry.dev/sdk/envelopes/"})," for more information on envelope requests."]})}),"\n",(0,o.jsxs)(t.h2,{id:"example-using-nock",children:["Example using ",(0,o.jsx)(t.a,{href:"https://github.com/nock/nock",children:"nock"})]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"const nock = require('nock')\nconst sentryTestkit = require('sentry-testkit')\nconst { testkit, initNetworkInterceptor } = sentryTestkit()\n\nbeforeAll(() => {\n    const myAppDSN = '<your DSN goes here>'\n    initNetworkInterceptor(myAppDSN, (baseUrl, handleRequestBody, handleEnvelopeRequestBody) => {\n      nock(baseUrl)\n        .persist()\n        .post(/\\/api\\/.*\\/store/)\n          .reply(200, (_, requestBody) => {\n            handleRequestBody(requestBody)\n          })\n          .post(/\\/api\\/.*\\/envelope/)\n          .reply(200)\n          .on('request', (_, interceptor, body) => {\n            if (interceptor.uri.test('/api/000000/envelope')) {\n              handleEnvelopeRequestBody(body)\n            }\n          })\n    })\n})\n\ntest('findReport example', async function() {\n    const err = new Error('error to look for')\n\n    // Some faulty scenario that will report err\n\n    const report = testkit.findReport(err)\n    expect(report).toBeDefined()\n})\n"})})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var r=n(6540);const o={},i=r.createContext(o);function s(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);