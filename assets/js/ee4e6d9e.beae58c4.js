"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[123],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>y});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),d=c(n),y=o,k=d["".concat(p,".").concat(y)]||d[y]||u[y]||i;return n?r.createElement(k,s(s({ref:t},l),{},{components:n})):r.createElement(k,s({ref:t},l))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=d;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a.mdxType="string"==typeof e?e:o,s[1]=a;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9728:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const i={title:"Network Interception",description:"How to intercept network requests related to Sentry with Sentry Testkit",sidebar_position:3},s="Network Interception",a={unversionedId:"network-interception",id:"network-interception",title:"Network Interception",description:"How to intercept network requests related to Sentry with Sentry Testkit",source:"@site/docs/network-interception.md",sourceDirName:".",slug:"/network-interception",permalink:"/docs/network-interception",draft:!1,editUrl:"https://github.com/wix/sentry-testkit/blob/master/website/docs/docs/network-interception.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Network Interception",description:"How to intercept network requests related to Sentry with Sentry Testkit",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Type Definitions",permalink:"/docs/api/types"},next:{title:"External Process",permalink:"/docs/external-process"}},p={},c=[{value:"API",id:"api",level:2},{value:"<code>initNetworkInterceptor</code>",id:"initnetworkinterceptor",level:3},{value:"Example using nock",id:"example-using-nock",level:2}],l={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"network-interception"},"Network Interception"),(0,o.kt)("p",null,"Sentry Testkit supports using network interception libraries, without the need to change your application's ",(0,o.kt)("inlineCode",{parentName:"p"},"Sentry.init")," function.\nThe testkit is agnostic to the interception library you use."),(0,o.kt)("h2",{id:"api"},"API"),(0,o.kt)("h3",{id:"initnetworkinterceptor"},(0,o.kt)("inlineCode",{parentName:"h3"},"initNetworkInterceptor")),(0,o.kt)("p",null,"Sentry Testkit exports a ",(0,o.kt)("inlineCode",{parentName:"p"},"initNetworkInterceptor")," callback function, where you can init your interceptor.\nThe interceptor should intercept requests from ",(0,o.kt)("inlineCode",{parentName:"p"},"baseUrl")," and pass the request body (as json) to the ",(0,o.kt)("inlineCode",{parentName:"p"},"handleRequestBody")," function.\nFor envelope requests (such as performance events), we use the emitted request event,\nsince in a reply function nock automatically tries to parse the body as json,\nand fails since Sentry are using a non-standard json with a json request header."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"See ",(0,o.kt)("a",{parentName:"p",href:"https://develop.sentry.dev/sdk/envelopes/"},"https://develop.sentry.dev/sdk/envelopes/")," for more information on envelope requests.")),(0,o.kt)("h2",{id:"example-using-nock"},"Example using ",(0,o.kt)("a",{parentName:"h2",href:"https://github.com/nock/nock"},"nock")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const nock = require('nock')\nconst sentryTestkit = require('sentry-testkit')\nconst { testkit, initNetworkInterceptor } = sentryTestkit()\n\nbeforeAll(() => {\n    const myAppDSN = '<your DSN goes here>'\n    initNetworkInterceptor(myAppDSN, (baseUrl, handleRequestBody, handleEnvelopeRequestBody) => {\n      nock(baseUrl)\n        .persist()\n        .post(/\\/api\\/.*\\/store/)\n          .reply(200, (_, requestBody) => {\n            handleRequestBody(requestBody)\n          })\n          .post(/\\/api\\/.*\\/envelope/)\n          .reply(200)\n          .on('request', (_, interceptor, body) => {\n            if (interceptor.uri.test('/api/000000/envelope')) {\n              handleEnvelopeRequestBody(body)\n            }\n          })\n    })\n})\n\ntest('findReport example', async function() {\n    const err = new Error('error to look for')\n\n    // Some faulty scenario that will report err\n\n    const report = testkit.findReport(err)\n    expect(report).toBeDefined()\n})\n")))}u.isMDXComponent=!0}}]);